# key concepts

ex00: class, (de)constructor, heap/stack alloc
	- heap: newZombie
	- stack: randomChump
ex01: dynamic arr, mem management
	- allocate: zombieHorde
	- init arrr
ex02: pointer, reference
	- print addresses and values of a string, pointer, reference
ex03: reference vs pointer, encapsultation
	- reference: Weapon, HumanA
	- pointer: HumanB
	- attack logic
ex04: file I/O, string manipulation
	- replace all occurrences of a string in a file
	- write to a new file
ex05: pointers to member functions
	- function pointers: call complaint method in Harl
ex06: switch, filtering logic
	- filter and disp msg based on log level, using switch

250524
- ex00
  - [x] made notes about : (de)constructor, lib, alloc((-)HEAP/(+)STACK)
  - [x] read subject & write README.made
  - [x] write: code

250526
- ex01
	- [x] write code
	- [x] write your own tester (using announce())

250528 - 250530
- ex02
	- [x] write README.me (files, structure, feature)	
	- [x] make notes on it
	- [x] then  to code
- ex03
	- [x] write README.me (files, structure, feature)	
	- [x] make notes on it
	- [x] then  to code

250530
- ex04
	- [] write README.me (files, structure, feature)	
	- [] make notes on it
	- [] then  to code

Later
- [] fix: ex01(see TODO)

## reference
### ex00: standout function?
- Q:  what's member func, standalone func, how to sepearte, if it's outside the file, then standalon? (confusing)
```
I understand your confusion. Let me clarify this concept as simply as possible.

## When to Use Class Name Qualifier (e.g., `Zombie::`)

There are two key scenarios to understand:

1. **Inside Class Definition (in header file)**: Never use the qualifier
2. **Outside Class Definition (in implementation files)**: Always use the qualifier *IF* it's a member function

## The Critical Distinction

The core question is: **Is `newZombie()` a member function of the `Zombie` class or not?**

Based on your README requirements, `newZombie()` should be a standalone function (not a member function). Let me explain why:

### Member Functions vs Standalone Functions

1. **Member Functions**:
   - Belong to a class
   - Have access to class's private members
   - Are called using an object: `zombie.someFunction()` or `zombiePtr->someFunction()`
   
2. **Standalone Functions**:
   - Don't belong to any class
   - Can't access private members (unless they're friend functions)
   - Are called directly: `someFunction()`

## Why `newZombie()` Should Be a Standalone Function

Your README describes `newZombie()` as:
```
- add: member func `Zombie* newZombie( std::string name );`
  - create a zombie
  - name it
  - just returns it (for use outside the func scope)
```

While it says "member func", the purpose of the function is to **create a new Zombie object** - this is typically done as a standalone function or a static factory method, not a regular member function.

## In Your Case

In newZombie.cpp, you have:
```cpp
Zombie* NewZombie(string name)
{
    Zombie* z = new Zombie(name);
    return z;
};
```

This is **correct if `newZombie()` is a standalone function**, except:
1. Function naming should be `newZombie` not `NewZombie` (lowercase)
2. Your `.hpp` file needs to declare it outside the class

## Shortest Answer

When implementing a function in a separate file:
- If it's a member function: Use `ReturnType ClassName::FunctionName(...)`
- If it's a standalone function: Just use `ReturnType FunctionName(...)`

In your case, `newZombie()` should be a standalone function because it creates new objects, so don't use the `Zombie::` qualifier.
```